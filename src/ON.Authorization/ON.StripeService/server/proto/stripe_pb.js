// source: proto/stripe.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.stripe.StripeData', null, global);
goog.exportSymbol('proto.stripe.StripeId', null, global);
goog.exportSymbol('proto.stripe.StripeRequest', null, global);
goog.exportSymbol('proto.stripe.StripeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stripe.StripeId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stripe.StripeId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stripe.StripeId.displayName = 'proto.stripe.StripeId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stripe.StripeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stripe.StripeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stripe.StripeRequest.displayName = 'proto.stripe.StripeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stripe.StripeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stripe.StripeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stripe.StripeResponse.displayName = 'proto.stripe.StripeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stripe.StripeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stripe.StripeData.repeatedFields_, null);
};
goog.inherits(proto.stripe.StripeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stripe.StripeData.displayName = 'proto.stripe.StripeData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stripe.StripeId.prototype.toObject = function(opt_includeInstance) {
  return proto.stripe.StripeId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stripe.StripeId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeId.toObject = function(includeInstance, msg) {
  var f, obj = {
    stripeid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stripe.StripeId}
 */
proto.stripe.StripeId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stripe.StripeId;
  return proto.stripe.StripeId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stripe.StripeId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stripe.StripeId}
 */
proto.stripe.StripeId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStripeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stripe.StripeId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stripe.StripeId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stripe.StripeId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStripeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string stripeId = 1;
 * @return {string}
 */
proto.stripe.StripeId.prototype.getStripeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stripe.StripeId} returns this
 */
proto.stripe.StripeId.prototype.setStripeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stripe.StripeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stripe.StripeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stripe.StripeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    created: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stripeid: (f = msg.getStripeid()) && proto.stripe.StripeId.toObject(includeInstance, f),
    stripedata: (f = msg.getStripedata()) && proto.stripe.StripeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stripe.StripeRequest}
 */
proto.stripe.StripeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stripe.StripeRequest;
  return proto.stripe.StripeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stripe.StripeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stripe.StripeRequest}
 */
proto.stripe.StripeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 3:
      var value = new proto.stripe.StripeId;
      reader.readMessage(value,proto.stripe.StripeId.deserializeBinaryFromReader);
      msg.setStripeid(value);
      break;
    case 4:
      var value = new proto.stripe.StripeData;
      reader.readMessage(value,proto.stripe.StripeData.deserializeBinaryFromReader);
      msg.setStripedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stripe.StripeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stripe.StripeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stripe.StripeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStripeid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.stripe.StripeId.serializeBinaryToWriter
    );
  }
  f = message.getStripedata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.stripe.StripeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.stripe.StripeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stripe.StripeRequest} returns this
 */
proto.stripe.StripeRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string created = 2;
 * @return {string}
 */
proto.stripe.StripeRequest.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.stripe.StripeRequest} returns this
 */
proto.stripe.StripeRequest.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StripeId stripeId = 3;
 * @return {?proto.stripe.StripeId}
 */
proto.stripe.StripeRequest.prototype.getStripeid = function() {
  return /** @type{?proto.stripe.StripeId} */ (
    jspb.Message.getWrapperField(this, proto.stripe.StripeId, 3));
};


/**
 * @param {?proto.stripe.StripeId|undefined} value
 * @return {!proto.stripe.StripeRequest} returns this
*/
proto.stripe.StripeRequest.prototype.setStripeid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stripe.StripeRequest} returns this
 */
proto.stripe.StripeRequest.prototype.clearStripeid = function() {
  return this.setStripeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stripe.StripeRequest.prototype.hasStripeid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StripeData stripeData = 4;
 * @return {?proto.stripe.StripeData}
 */
proto.stripe.StripeRequest.prototype.getStripedata = function() {
  return /** @type{?proto.stripe.StripeData} */ (
    jspb.Message.getWrapperField(this, proto.stripe.StripeData, 4));
};


/**
 * @param {?proto.stripe.StripeData|undefined} value
 * @return {!proto.stripe.StripeRequest} returns this
*/
proto.stripe.StripeRequest.prototype.setStripedata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stripe.StripeRequest} returns this
 */
proto.stripe.StripeRequest.prototype.clearStripedata = function() {
  return this.setStripedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stripe.StripeRequest.prototype.hasStripedata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stripe.StripeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stripe.StripeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stripe.StripeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsemessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stripe.StripeResponse}
 */
proto.stripe.StripeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stripe.StripeResponse;
  return proto.stripe.StripeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stripe.StripeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stripe.StripeResponse}
 */
proto.stripe.StripeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsemessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stripe.StripeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stripe.StripeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stripe.StripeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsemessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string responseMessage = 1;
 * @return {string}
 */
proto.stripe.StripeResponse.prototype.getResponsemessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stripe.StripeResponse} returns this
 */
proto.stripe.StripeResponse.prototype.setResponsemessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stripe.StripeData.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stripe.StripeData.prototype.toObject = function(opt_includeInstance) {
  return proto.stripe.StripeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stripe.StripeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscriptionitemsList: jspb.Message.toObjectList(msg.getSubscriptionitemsList(),
    proto.stripe.StripeId.toObject, includeInstance),
    customersList: jspb.Message.toObjectList(msg.getCustomersList(),
    proto.stripe.StripeId.toObject, includeInstance),
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.stripe.StripeId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stripe.StripeData}
 */
proto.stripe.StripeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stripe.StripeData;
  return proto.stripe.StripeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stripe.StripeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stripe.StripeData}
 */
proto.stripe.StripeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 2:
      var value = new proto.stripe.StripeId;
      reader.readMessage(value,proto.stripe.StripeId.deserializeBinaryFromReader);
      msg.addSubscriptionitems(value);
      break;
    case 3:
      var value = new proto.stripe.StripeId;
      reader.readMessage(value,proto.stripe.StripeId.deserializeBinaryFromReader);
      msg.addCustomers(value);
      break;
    case 4:
      var value = new proto.stripe.StripeId;
      reader.readMessage(value,proto.stripe.StripeId.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stripe.StripeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stripe.StripeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stripe.StripeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stripe.StripeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscriptionitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.stripe.StripeId.serializeBinaryToWriter
    );
  }
  f = message.getCustomersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.stripe.StripeId.serializeBinaryToWriter
    );
  }
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.stripe.StripeId.serializeBinaryToWriter
    );
  }
};


/**
 * optional string created = 1;
 * @return {string}
 */
proto.stripe.StripeData.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stripe.StripeData} returns this
 */
proto.stripe.StripeData.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated StripeId subscriptionItems = 2;
 * @return {!Array<!proto.stripe.StripeId>}
 */
proto.stripe.StripeData.prototype.getSubscriptionitemsList = function() {
  return /** @type{!Array<!proto.stripe.StripeId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stripe.StripeId, 2));
};


/**
 * @param {!Array<!proto.stripe.StripeId>} value
 * @return {!proto.stripe.StripeData} returns this
*/
proto.stripe.StripeData.prototype.setSubscriptionitemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.stripe.StripeId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stripe.StripeId}
 */
proto.stripe.StripeData.prototype.addSubscriptionitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stripe.StripeId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stripe.StripeData} returns this
 */
proto.stripe.StripeData.prototype.clearSubscriptionitemsList = function() {
  return this.setSubscriptionitemsList([]);
};


/**
 * repeated StripeId customers = 3;
 * @return {!Array<!proto.stripe.StripeId>}
 */
proto.stripe.StripeData.prototype.getCustomersList = function() {
  return /** @type{!Array<!proto.stripe.StripeId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stripe.StripeId, 3));
};


/**
 * @param {!Array<!proto.stripe.StripeId>} value
 * @return {!proto.stripe.StripeData} returns this
*/
proto.stripe.StripeData.prototype.setCustomersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.stripe.StripeId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stripe.StripeId}
 */
proto.stripe.StripeData.prototype.addCustomers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.stripe.StripeId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stripe.StripeData} returns this
 */
proto.stripe.StripeData.prototype.clearCustomersList = function() {
  return this.setCustomersList([]);
};


/**
 * repeated StripeId subscriptions = 4;
 * @return {!Array<!proto.stripe.StripeId>}
 */
proto.stripe.StripeData.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.stripe.StripeId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stripe.StripeId, 4));
};


/**
 * @param {!Array<!proto.stripe.StripeId>} value
 * @return {!proto.stripe.StripeData} returns this
*/
proto.stripe.StripeData.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.stripe.StripeId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stripe.StripeId}
 */
proto.stripe.StripeData.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.stripe.StripeId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stripe.StripeData} returns this
 */
proto.stripe.StripeData.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};


goog.object.extend(exports, proto.stripe);
