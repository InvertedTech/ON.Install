syntax = "proto3";

package NodeF.Fragments.Authentcation;

import "Protos/Nodef/Fragment/Authentication/UserRecord.proto";

// Service for Authentcation provider fragments
service AuthenticationProvider {
  // Export a list of all data.
  rpc BackupAllData (BackupAllDataRequest) returns (stream BackupAllDataResponse) {}

  // Export a list of all user public data.
  rpc ExportUsers (ExportUsersRequest) returns (stream ExportUsersResponse) {}

  // Restore a list of all data.
  rpc RestoreAllData (RestoreAllDataRequest) returns (RestoreAllDataResponse) {}

  // Get the status of the service
  rpc ServiceStatus (ServiceStatusRequest) returns (ServiceStatusResponse) {}

  // Bring the service offline, online, restart the service, etc...
  rpc ServiceOperation (ServiceOperationRequest) returns (ServiceStatusResponse) {}
}
  
message BackupAllDataRequest {}
  
message BackupAllDataResponse {
  UserBackupDataRecord UserRecord = 1;
}

message ExportUsersRequest {}
  
message ExportUsersResponse {
  UserRecord.PublicData UserRecord = 1;
}

message RestoreAllDataRequest {
  enum RestorePlan {
    Wipe = 0;         // Wipe entire user database and restore users.  Any new users will be deleted.
    Overwrite = 1;    // Overwrite all records with corresponding record.  Will not delete new records not in list.
    MissingOnly = 2;  // Only restore missing user records.  Will not overwrite user records that already exist.
  }
  RestorePlan Plan = 1;
  repeated UserBackupDataRecord UserRecords = 2;
}

message RestoreAllDataResponse {
  int32 NumUsersRestored = 1;
  int32 NumUsersSkipped = 2;
  int32 NumUsersOverwriten = 3;
  int32 NumUsersWiped = 4;
}

message ServiceOperationRequest {
  enum ServiceOperation {
    Offline = 0;  // Bring service offline and post maintenance page
    Online = 1;   // Bring service online
    Restart = 2;  // Request service to restart
  }

  ServiceOperation Operation = 1;
}

message ServiceStatusRequest {}

message ServiceStatusResponse {
  enum OnlineStatus {
    Offline = 0;
    Online = 1;
    Starting = 2;
    Stopping = 3;
    Faulted = 4;
  }

  OnlineStatus Status = 1;
  string Message = 2;
}

message UserBackupDataRecord {
  bytes UserID = 1;    // Guid for the user
  UserRecord Data = 2; // Structured user data, including both private and public data
  bytes ExtraData = 3; // Generic byte structure to save all application specific data for user
}
