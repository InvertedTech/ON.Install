syntax = "proto3";

package ON.Fragments.Settings;

import "google/protobuf/timestamp.proto";
import "Protos/ON/Fragments/Authorization/SharedTypes.proto";
import "Protos/ON/Fragments/Authorization/Payments/Fake/FakePaymentSettings.proto";
import "Protos/ON/Fragments/Authorization/Payments/ParallelEconomy/ParallelEconomySettings.proto";
import "Protos/ON/Fragments/Authorization/Payments/Stripe/StripeSettings.proto";
import "Protos/ON/Fragments/Authorization/Payments/Paypal/PaypalSettings.proto";
import "Protos/ON/Fragments/Content/SharedTypes.proto";
import "Protos/ON/Fragments/Comments/SharedTypes.proto";

// User authentication data
message SettingsRecord {
  SettingsPublicData Public = 1;
  SettingsPrivateData Private = 2;
  SettingsOwnerData Owner = 3;
}

message SettingsPublicData {
  uint32 VersionNum = 1;                            // Version of settings
  google.protobuf.Timestamp ModifiedOnUTC = 2;      // UTC timestamp when settings record was last modified
  PersonalizationPublicRecord Personalization = 10;
  SubscriptionPublicRecord Subscription = 11;
  CommentsPublicRecord Comments = 12;
  CMSPublicRecord CMS = 13;
}

message SettingsPrivateData {
  string ModifiedBy = 2;
  PersonalizationPrivateRecord Personalization = 10;
  SubscriptionPrivateRecord Subscription = 11;
  CommentsPrivateRecord Comments = 12;
  CMSPrivateRecord CMS = 13;
}

message SettingsOwnerData {
  PersonalizationOwnerRecord Personalization = 10;
  SubscriptionOwnerRecord Subscription = 11;
  CommentsOwnerRecord Comments = 12;
  CMSOwnerRecord CMS = 13;
}

message PersonalizationPublicRecord {
  string Title = 1;
  string MetaDescription = 2;
  bool DefaultToDarkMode = 3;
  bytes ProfileImage = 10;
  bytes HeaderImage = 11;
}

message PersonalizationPrivateRecord {
}

message PersonalizationOwnerRecord {
}

message SubscriptionPublicRecord {
  repeated ON.Fragments.Authorization.SubscriptionTier Tiers = 1;
  bool AllowOther = 2;
}

message SubscriptionPrivateRecord {
}

message SubscriptionOwnerRecord {
  ON.Fragments.Authorization.Payments.ParallelEconomy.ParallelEconomySettings ParallelEconomy = 1;
  ON.Fragments.Authorization.Payments.Stripe.StripeSettings Stripe = 2;
  ON.Fragments.Authorization.Payments.Paypal.PaypalSettings Paypal = 3;
  ON.Fragments.Authorization.Payments.Fake.FakePaymentSettings Fake = 4;
}

message CommentsPublicRecord {
  bool AllowLinks = 1;
  ON.Fragments.Comments.CommentOrder DefaultOrder = 2;
  ON.Fragments.Comments.CommentRestrictionMinimum DefaultRestriction = 3;
  bool ExplicitModeEnabled = 4;
}

message CommentsPrivateRecord {
  repeated string BlackList = 1;
}

message CommentsOwnerRecord {
}

message CMSPublicRecord {
  ON.Fragments.Content.LayoutEnum DefaultLayout = 1;
  repeated ChannelRecord Channels = 2;
  repeated CategoryRecord Categories = 3;
  CMSPublicMenuRecord Menu = 4;
}

message CMSPrivateRecord {
}

message CMSOwnerRecord {
}

message ChannelRecord {
  string ChannelId = 1;
  string ParentChannelId = 2;
  string DisplayName = 3;
  string UrlStub = 4;

  string OldChannelId = 1001;
}

message CategoryRecord {
  string CategoryId = 1;
  string ParentCategoryId = 2;
  string DisplayName = 3;
  string UrlStub = 4;

  string OldCategoryId = 1001;
}

message CMSPublicMenuRecord {
  string AudioMenuLinkName = 1;
  string PictureMenuLinkName = 2;
  string VideoMenuLinkName = 3;
  string WrittenMenuLinkName = 4;
}
