syntax = "proto3";

package ON.Fragments.Authentication;

import "Protos/ON/Fragments/Authentication/UserRecord.proto";

// Service for Authentication user fragment interface
service UserInterface {
  // Authenticate a user with a login and password, return a bearer token if successful
  rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticateUserResponse) {}

  // Change another user's password.  Requires current user to be an admin.
  rpc ChangeOtherPassword (ChangeOtherPasswordRequest) returns (ChangeOtherPasswordResponse) {}

  // Change user's own password.  Requires user to know their current password.
  rpc ChangeOwnPassword (ChangeOwnPasswordRequest) returns (ChangeOwnPasswordResponse) {}

  // Create account for a user
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}

  // Disable another user.  Requires current user to be an admin.
  rpc DisableOtherUser (DisableOtherUserRequest) returns (DisableOtherUserResponse) {}

  // Enable another user.  Requires current user to be an admin.
  rpc EnableOtherUser (EnableOtherUserRequest) returns (EnableOtherUserResponse) {}

  // Get User record
  rpc GetOtherUser (GetOtherUserRequest) returns (GetOtherUserResponse) {}

  // Get User record
  rpc GetOwnUser (GetOwnUserRequest) returns (GetOwnUserResponse) {}

  // Modify User record
  rpc ModifyOtherUser (ModifyOtherUserRequest) returns (ModifyOtherUserResponse) {}

  // Modify User record
  rpc ModifyOwnUser (ModifyOwnUserRequest) returns (ModifyOwnUserResponse) {}

  // Renew the bearer token
  rpc RenewToken (RenewTokenRequest) returns (RenewTokenResponse) {}
}
  
message AuthenticateUserRequest {
  string UserName = 1;
  string Password = 2;
}
  
message AuthenticateUserResponse {
  string BearerToken = 1;
}
  
message ChangeOtherPasswordRequest {
  bytes UserID = 1;                   // Guid for the user
  string NewPassword = 2;
}
  
message ChangeOtherPasswordResponse {
  ErrorType Error = 1;

  enum ErrorType {
    NoError = 0;
    UnknownError = -1;
    BadNewPassword = 2;
  }
}
  
message ChangeOwnPasswordRequest {
  string OldPassword = 1;
  string NewPassword = 2;
}
  
message ChangeOwnPasswordResponse {
  ErrorType Error = 1;

  enum ErrorType {
    NoError = 0;
    UnknownError = -1;
    BadOldPassword = 1;
    BadNewPassword = 2;
  }
}

message CreateUserRequest {
  UserRecord Record = 1;
  string Password = 2;
}
  
message CreateUserResponse {
  string BearerToken = 1;
  ErrorType Error = 2;

  enum ErrorType {
    NoError = 0;
    UnknownError = -1;
    UserNameTaken = 1;
  }
}

message DisableOtherUserRequest {
  bytes UserID = 1;                   // Guid for the user
}
  
message DisableOtherUserResponse {
  ErrorType Error = 1;

  enum ErrorType {
    NoError = 0;
    UnknownError = -1;
  }
}
  
message EnableOtherUserRequest {
  bytes UserID = 1;                   // Guid for the user
}
  
message EnableOtherUserResponse {
  ErrorType Error = 1;

  enum ErrorType {
    NoError = 0;
    UnknownError = -1;
  }
}
  
message GetOtherUserRequest {
  bytes UserID = 1;                   // Guid for the user
}
  
message GetOtherUserResponse {
  UserRecord Record = 1;
}

message GetOwnUserRequest {
}
  
message GetOwnUserResponse {
  UserRecord Record = 1;
}

message ModifyOtherUserRequest {
  bytes UserID = 1;                 // Guid for the user
  string UserName = 2;              // User name of the user
  string DisplayName = 3;           // Public display name of the user
  repeated string Emails = 4;       // Private email(s) used for password resets
  repeated string Roles = 5;        // Roles for the user
}
  
message ModifyOtherUserResponse {
  string Error = 1;
}

message ModifyOwnUserRequest {
  string DisplayName = 1;           // Public display name of the user
  repeated string Emails = 2;       // Private email(s) used for password resets
  repeated string Identities = 3;   // Public identities associated with the user ex: user@domain.com
}
  
message ModifyOwnUserResponse {
  string Error = 1;
  string BearerToken = 2;
}

message RenewTokenRequest {
}
  
message RenewTokenResponse {
  string BearerToken = 1;
}
